{"version":3,"sources":["components/Balance/Balance.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Dashboard.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","serviceWorker.js","index.js","components/Controls/Controls.module.css"],"names":["module","exports","Controls","handleDeposit","handleWithdraw","className","css","controls","type","min","name","onClick","e","button","Balance","income","expense","balance","role","aria-label","TransactionLines","transactions","map","id","amount","date","key","defaultProps","TransactionHistory","history","Dashboard","state","componentDidMount","toast","configure","notify","message","Number","target","parentElement","firstElementChild","value","transaction","v4","Date","toLocaleString","setState","prevState","this","dashboard","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.005919e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__FKW4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__2YyWN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__2F9IR\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from './Controls.module.css';\n\nconst Controls = ({ handleDeposit, handleWithdraw }) => (\n    <section className={css.controls}>\n        <input type=\"number\" min=\"0\" name=\"amount\" />\n        <button onClick={e => handleDeposit(e)} type=\"button\" className={css.button}>\n            Deposit\n        </button>\n        <button onClick={e => handleWithdraw(e)} type=\"button\" className={css.button}>\n            Withdraw\n        </button>\n    </section>\n);\n\nControls.propTypes = {\n    handleDeposit: PropTypes.func.isRequired,\n    handleWithdraw: PropTypes.func.isRequired\n};\n\nexport default Controls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from './Balance.module.css';\n\nconst Balance = ({ income, expense, balance }) => (\n    <section className={css.balance}>\n        <span>\n            <span role=\"img\" aria-label=\"arrow-up\">\n                ⬆️\n            </span>\n            {income}$\n        </span>\n        <span>\n            <span role=\"img\" aria-label=\"arrow-down\">\n                ⬇️\n            </span>\n            {expense}$\n        </span>\n        <span>Balance: {balance}$</span>\n    </section>\n);\n\nBalance.propTypes = {\n    income: PropTypes.number.isRequired,\n    expense: PropTypes.number.isRequired,\n    balance: PropTypes.number.isRequired\n};\n\nexport default Balance;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport css from './TransactionHistory.module.css';\n\nconst TransactionLines = ({ transactions }) => {\n    return transactions.map(({ id, type, amount, date }) => (\n        <tr key={id}>\n            <td>{type}</td>\n            <td>{amount}$</td>\n            <td>{date}</td>\n        </tr>\n    ));\n};\n\nconst TransactionHistory = ({ transactions }) => (\n    <table className={css.history}>\n        <thead>\n            <tr>\n                <th>Transaction</th>\n                <th>Amount</th>\n                <th>Date</th>\n            </tr>\n        </thead>\n        <tbody>\n            <TransactionLines transactions={transactions} />\n        </tbody>\n    </table>\n);\n\nTransactionLines.defaultProps = {\n    transactions: []\n};\n\nTransactionLines.propTypes = {\n    transactions: PropTypes.array\n};\n\nexport default TransactionHistory;\n","import React, { Component } from \"react\";\nimport v4 from \"uuid/v4\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Controls from \"../Controls\";\nimport Balance from \"../Balance\";\nimport TransactionHistory from \"../TransactionHistory\";\nimport css from './Dashboard.module.css';\n\nclass Dashboard extends Component {\n    state = {\n        income: 0,\n        expense: 0,\n        balance: 0,\n        transactions: []\n    };\n\n    componentDidMount = () => {\n        toast.configure();\n    };\n\n    notify = message => toast(message);\n\n    handleDeposit = e => {\n        const amount = Number(e.target.parentElement.firstElementChild.value);\n\n        if (amount) {\n            const transaction = {\n                id: v4(),\n                type: \"Deposit\",\n                amount: amount,\n                date: new Date().toLocaleString(\"uk\")\n            };\n\n            this.setState(prevState => ({\n                income: (prevState.income += amount),\n                balance: (prevState.balance += amount),\n                transactions: [...prevState.transactions, transaction]\n            }));\n        } else {\n            this.notify(\"Please enter amount\");\n        }\n    };\n\n    handleWithdraw = e => {\n        const amount = Number(e.target.parentElement.firstElementChild.value);\n\n        if (amount) {\n            const { balance } = this.state;\n            if (amount > balance) {\n                this.notify(\"Not enough funds on your acoount\");\n                return;\n            }\n            const transaction = {\n                id: v4(),\n                type: \"Withdrawal\",\n                amount: amount,\n                date: new Date().toLocaleString(\"uk\")\n            };\n            this.setState(prevState => ({\n                expense: (prevState.expense += amount),\n                balance: (prevState.balance -= amount),\n                transactions: [...prevState.transactions, transaction]\n            }));\n        } else {\n            this.notify(\"Please enter amount\");\n        }\n    };\n\n    render() {\n        const { income, expense, balance, transactions } = this.state;\n        return (\n            <div className={css.dashboard}>\n                <Controls\n                    handleDeposit={this.handleDeposit}\n                    handleWithdraw={this.handleWithdraw}\n                />\n                <Balance income={income} expense={expense} balance={balance} />\n                <TransactionHistory transactions={transactions} />\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3aurQ\",\"button\":\"Controls_button__1WWDI\"};"],"sourceRoot":""}